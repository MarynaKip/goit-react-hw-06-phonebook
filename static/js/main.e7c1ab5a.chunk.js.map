{"version":3,"sources":["redux/phoneBook/types.js","components/Contacts/index.jsx","components/ContactItem/index.jsx","redux/phoneBook/selectors.js","components/ContactList/index.jsx","App.js","redux/phoneBook/reducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["types","SAVE","DELETE","UPDATE_FILTER","initialState","id","name","number","Contacts","onSave","useState","state","setState","handleChange","e","prevState","target","value","onSubmit","preventDefault","newItem","uuidv4","Number","type","onChange","pattern","title","required","useStyles","createUseStyles","item","display","marginBottom","alignItems","ContactItem","onClick","classes","className","getContacts","contacts","items","getFilter","filter","list","listStyle","margin","padding","ContactList","onDelete","useSelector","contactsArr","contact","toLowerCase","includes","map","App","onUpdate","useAlert","combineReducers","action","payload","phoneBook","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","options","position","positions","BOTTOM_CENTER","timeout","offset","transition","transitions","SCALE","Root","template","AlertTemplate","render","document","getElementById"],"mappings":"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","file":"static/js/main.e7c1ab5a.chunk.js","sourcesContent":["const types = {\r\n  SAVE: \"phonebook/save\",\r\n  DELETE: \"phonebook/delete\",\r\n  UPDATE_FILTER: \"phonebook/update-filter\",\r\n};\r\n\r\nexport default types;\r\n","import PropTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport * as actions from \"../../redux/phoneBook/actions\";\r\n\r\nconst initialState = {\r\n  id: \"\",\r\n  name: \"\",\r\n  number: \"\",\r\n};\r\n\r\nconst Contacts = ({ onSave }) => {\r\n  const [state, setState] = useState(initialState);\r\n\r\n  const { name, number } = state;\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const newItem = {\r\n      id: uuidv4(), // uuid\r\n      name,\r\n      number: Number(number),\r\n    };\r\n\r\n    onSave(newItem);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [e.target.name]: e.target.value,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          <span>Name:</span>\r\n          <input\r\n            type=\"text\"\r\n            value={name}\r\n            name=\"name\"\r\n            onChange={handleChange}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <label>\r\n          <input\r\n            type=\"tel\"\r\n            value={number}\r\n            name=\"number\"\r\n            onChange={handleChange}\r\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n        <button type=\"submit\">+ Add</button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nContacts.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Contacts;\r\n","import PropTypes from \"prop-types\";\r\nimport { createUseStyles } from \"react-jss\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst useStyles = createUseStyles({\r\n  item: {\r\n    display: \"flex\",\r\n    marginBottom: 10,\r\n    alignItems: \"flex-start\",\r\n  },\r\n});\r\n\r\nconst ContactItem = ({ onClick }) => {\r\n  const classes = useStyles();\r\n  const contact = \"\"; //from redux\r\n  return (\r\n    <li key={contact.id} className={classes.item}>\r\n      {contact.name}\r\n      {contact.number}\r\n      <button id={contact.id} type=\"button\" onClick={onClick}>\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactItem.propTypes = {\r\n  contact: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n    number: PropTypes.number.isRequired,\r\n  }),\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactItem;\r\n","export const getContacts = (state) => state.contacts.items;\r\nexport const getFilter = (state) => state.contacts.filter;\r\n","import { createUseStyles } from \"react-jss\";\r\nimport { useSelector, connect } from \"react-redux\";\r\n//import PropTypes from \"prop-types\";\r\nimport ContactItem from \"../ContactItem\";\r\nimport * as actions from \"../../redux/phoneBook/actions\";\r\nimport { getContacts, getFilter } from \"../../redux/phoneBook/selectors\";\r\n\r\nconst useStyles = createUseStyles({\r\n  list: {\r\n    listStyle: \"none\",\r\n    margin: 0,\r\n    padding: 10,\r\n  },\r\n});\r\n\r\nconst ContactList = ({ onDelete }) => {\r\n  const classes = useStyles();\r\n\r\n  const contacts = useSelector(getContacts); //from redux\r\n  const filter = useSelector(getFilter); //from redux\r\n\r\n  const contactsArr = contacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n\r\n  const handleDeleteItem = (e) => onDelete(e.target.value);\r\n\r\n  return (\r\n    <ul className={classes.list}>\r\n      {contactsArr.map((contact) => (\r\n        <ContactItem contact={contact} onClick={onDelete} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\n// ContactList.propTypes = {\r\n//   contacts: PropTypes.array,\r\n// };\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   items: state.contacts.items,\r\n//   filter: state.contacts.filter,\r\n// });\r\n\r\n// export default connect(mapStateToProps, actions)(ContactList);\r\nexport default ContactList;\r\n","import \"./App.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useAlert } from \"react-alert\";\r\nimport Contacts from \"./components/Contacts\";\r\nimport ContactList from \"./components/ContactList\";\r\nimport * as actions from \"./redux/phoneBook/actions\";\r\n\r\nconst App = ({ onUpdate }) => {\r\n  const alert = useAlert();\r\n\r\n  const filter = \"\"; //from redux\r\n  // const [contacts, setContacts] = useState([]);\r\n  // const [filter, setFilter] = useState(\"\");\r\n\r\n  // useEffect(() => {\r\n  //   const storageContacts = localStorage.getItem(\"contacts\");\r\n  //   setContacts(JSON.parse(storageContacts));\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   localStorage.setItem(\"contacts\", JSON.stringify(contacts));\r\n  // });\r\n\r\n  const handleFilter = (e) => onUpdate(e.target.value);\r\n\r\n  // const handleAddContact = (newContact) => {\r\n  //   if (contacts.some((contact) => contact.name === newContact.name)) {\r\n  //     alert.show(`Contact is already in contscts.`);\r\n  //     return;\r\n  //   }\r\n  //   setContacts((prevState) => [...prevState, newContact]);\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <span>Find:</span>\r\n      <input type=\"text\" value={filter} name=\"filter\" onChange={handleFilter} />\r\n\r\n      <Contacts />\r\n\r\n      <ContactList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport types from \"./types\";\r\n\r\nconst initialState = {\r\n  contacts: {\r\n    items: [\r\n      {\r\n        id: null,\r\n        name: null,\r\n        number: null,\r\n      },\r\n    ],\r\n    filter: \"\",\r\n  },\r\n};\r\n\r\nconst items = (state = initialState.contacts.items, action) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case types.SAVE:\r\n      //   if (state.some((contact) => contact.name === payload.name)) {\r\n      //     alert.show(`Contact is already in contscts.`);\r\n      //     return;\r\n      //   }\r\n      return [...state, payload];\r\n\r\n    case types.DELETE:\r\n      return [...state.filter(({ id }) => payload !== id)];\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst filter = (state = initialState.contacts.filter, action) => {\r\n  const { payload } = action;\r\n  switch (action.type) {\r\n    case types.UPDATE_FILTER:\r\n      return payload;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default combineReducers({ items, filter });\r\n","import { combineReducers } from \"redux\";\r\nimport phoneBook from \"./phoneBook/reducer\";\r\n\r\nexport default combineReducers({ phoneBook });\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./rootReducer\";\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { transitions, positions, Provider as AlertProvider } from \"react-alert\";\r\nimport AlertTemplate from \"react-alert-template-basic\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./redux/store\";\r\n\r\n// optional configuration\r\nconst options = {\r\n  // you can also just use 'bottom center'\r\n  position: positions.BOTTOM_CENTER,\r\n  timeout: 5000,\r\n  offset: \"30px\",\r\n  // you can also just use 'scale'\r\n  transition: transitions.SCALE,\r\n};\r\n\r\nconst Root = () => (\r\n  <AlertProvider template={AlertTemplate} {...options}>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </AlertProvider>\r\n);\r\n\r\nrender(<Root />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}